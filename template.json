{"AWSTemplateFormatVersion":"2010-09-09","Description":"This stack simplifies deployment of TurnKey Linux products in AWS ECS with EC2 and Fargate launch types. The resources are created dynamically in response to the user's configuration preferences. Required networking infrastructure and load balancing is automatically set up and an ECS service is deployed on top of a fresh ECS cluster. For more information please consult https://www.turnkeylinux.org/awsmp-containers","Metadata":{"AWS::CloudFormation::Interface":{"ParameterGroups":[{"Label":{"default":"Networking"},"Parameters":["VPCCidr","SubnetMaskBits"]},{"Label":{"default":"General ECS settings"},"Parameters":["WantDemoService","Placement","TaskDefinitionName"]},{"Label":{"default":"ECS-EC2 settings"},"Parameters":["WantEC2","DesiredCapacity","MaxSize","InstanceType","KeyName","IngressCIDR","ECSAMI"]},{"Label":{"default":"Elastic Load Balancing settings"},"Parameters":["LoadBalancerProtocol","WantS3AccessLogs"]},{"Label":{"default":"ELB SSL termination settings"},"Parameters":["SSLCertificateARN","SSLDomainName","SSLValidationMethod","SSLCertificateSANs"]}]}},"Parameters":{"VPCCidr":{"Type":"String","Description":"IPv4 CIDR address block to assign to the VPC of the stack.","Default":"10.0.0.0/16","AllowedPattern":"((\\d{1,3})\\.){3}\\d{1,3}/\\d{1,2}","ConstraintDescription":"must follow proper CIDR syntax"},"SubnetMaskBits":{"Type":"Number","Description":"Number of bits to allocate to the subnet mask of each subnet.","Default":"8","MinValue":"1","MaxValue":"32","ConstraintDescription":"must be between 1 and 32"},"WantDemoService":{"Description":"Do you wish to run a demo ECS service on this stack? If not, subsequent options in this section have no effect.","Type":"String","Default":"yes","AllowedValues":["yes","no"],"ConstraintDescription":"must be 'yes' or 'no'"},"Placement":{"Description":"Task placement (launch type) for the demo service (and task) placed on the ECS cluster. This does NOT restrict the placement of tasks launched subsequently on the cluster. More information: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/Welcome.html","Type":"String","Default":"EC2","AllowedValues":["EC2","FARGATE"],"ConstraintDescription":"must be a valid placement type."},"TaskDefinitionName":{"Type":"String","Description":"Task definition to launch in this stack.","Default":"TaskDefinition","AllowedValues":["TaskDefinition"],"ConstraintDescription":"Please choose one of the available task definitions. You will be able to launch more EC2/Fargate tasks after creating the stack."},"WantEC2":{"Description":"Do you wish to setup EC2 infrastructure on the ECS cluster? If not, subsequent options in this section have no effect.","Type":"String","Default":"yes","AllowedValues":["yes","no"],"ConstraintDescription":"must be 'yes' or 'no'"},"DesiredCapacity":{"Type":"Number","Default":"1","Description":"Number of EC2 instances to launch in your ECS cluster."},"MaxSize":{"Type":"Number","Default":"3","Description":"Maximum number of EC2 instances that can be launched in your ECS cluster as part of the EC2 autoscaling group."},"InstanceType":{"Description":"EC2 instance type.","Type":"String","Default":"t2.large","AllowedValues":["t2.micro","t2.small","t2.medium","t2.large","m3.medium","m3.large","m3.xlarge","m3.2xlarge","m4.large","m4.xlarge","m4.2xlarge","m4.4xlarge","m4.10xlarge","c4.large","c4.xlarge","c4.2xlarge","c4.4xlarge","c4.8xlarge","c3.large","c3.xlarge","c3.2xlarge","c3.4xlarge","c3.8xlarge","r3.large","r3.xlarge","r3.2xlarge","r3.4xlarge","r3.8xlarge","i2.xlarge","i2.2xlarge","i2.4xlarge","i2.8xlarge"],"ConstraintDescription":"must be a valid instance type."},"KeyName":{"Type":"AWS::EC2::KeyPair::KeyName","Description":"An existing EC2 KeyPair to enable SSH access to the ECS EC2 instances."},"IngressCIDR":{"Type":"String","Description":"A CIDR of IPv4 addresses which will be able to access the ECS EC2 instance(s) via SSH.","Default":"0.0.0.0/0","AllowedPattern":"((\\d{1,3})\\.){3}\\d{1,3}/\\d{1,2}"},"ECSAMI":{"Description":"AMI ID for bootstrapping the EC2 instances.","Type":"AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>","Default":"/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id"},"LoadBalancerProtocol":{"Description":"Protocol of the public-facing load balancer. If HTTP or HTTPS, an Application Load Balancer is used. If TCP, a Network Load Balancer is used. The port number is determined automatically from the chosen task definition. If the task definition chosen does not provide the selected protocol the stack will fail to initialize. NOTE: Currently, Amazon ECS services can only specify a single load balancer or target group. For load balancing multiple ports, multiple services are required. More information: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-load-balancing.html Unless HTTPS is chosen, options in the SSL termination section have no effect. More information: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html","Type":"String","Default":"HTTP","AllowedValues":["HTTP","HTTPS","TCP"]},"WantS3AccessLogs":{"Description":"Whether to log access to the public load balancer to an S3 bucket","Type":"String","Default":"no","AllowedValues":["yes","no"],"ConstraintDescription":"must be 'yes' or 'no'"},"SSLCertificateARN":{"Description":"The ARN of an existing SSL certificate to install on the load balancer (if applicable). If the load balancer protocol is not HTTPS, this and subsequent options in this section have no effect.","Type":"String","AllowedPattern":"arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:[\\w+=/,.@-]*:[0-9]+:[\\w+=,.@-]+(/[\\w+=,.@-]+)*","Default":"arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012","ConstraintDescription":"must match format for certificate ARNs. More information: https://docs.aws.amazon.com/acm/latest/APIReference/API_RequestCertificate.html#API_RequestCertificate_ResponseSyntax"},"SSLDomainName":{"Description":"The primary (CN) domain name for the newly generated certificate. If SSL termination is disabled this option has no effect. NOTE: If SSL termination is enabled and this option is filled in, the stack will not be created until the certificate is confirmed via chosen certificate request validation method. More information: https://docs.aws.amazon.com/acm/latest/APIReference/API_RequestCertificate.html","Type":"String","Default":"example.com"},"SSLValidationMethod":{"Description":"The validation method for newly created SSL certificates. If SSL termination is disabled this option has no effect.","Type":"String","Default":"EMAIL","AllowedValues":["EMAIL","DNS"],"ConstraintDescription":"Please choose EMAIL or DNS. More information: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-certificatemanager-certificate.html#cfn-certificatemanager-certificate-validationmethod"},"SSLCertificateSANs":{"Description":"A comma-delimited list of SANs (subject alternative names) for the newly generated certificate. If SSL termination is disabled this option has no effect. NOTE: You will have to confirm ownership for all of the specified SANs as well as for the primary domain before the load balancer can be initialized with the new certificate.","Type":"CommaDelimitedList","Default":"www.example.com,mail.example.com"}},"Mappings":{"TDMetadata":{"TaskDefinition":{"HTTP":"nginx:80","HTTPS":"nginx:443","TCP":"NONE","Family":"turnkey-","ContainerDefinitions":[{"Name":"joomla","Image":"/joomla:3.9.8","Cpu":256,"Memory":256,"Environment":[{"Value":"admin","Name":"APP_USER"},{"Value":"Kappa123","Name":"APP_PASS"},{"Value":"admin@example.com","Name":"APP_MAIL"},{"Value":"matomo","Name":"DB_USER"},{"Value":"matomo","Name":"DB_NAME"},{"Value":"Kappa123","Name":"DB_PASS"}],"MountPoints":[{"SourceVolume":"webroot","ContainerPath":"/var/www/html","ReadOnly":false},{"SourceVolume":"vhosts","ContainerPath":"/etc/turnkey/vhosts","ReadOnly":false},{"SourceVolume":"initdb","ContainerPath":"/etc/turnkey/initdb","ReadOnly":false},{"SourceVolume":"secrets","ContainerPath":"/etc/turnkey/secrets","ReadOnly":true}],"LogConfiguration":{"LogDriver":"awslogs","Options":{"awslogs-create-group":"true","awslogs-group":"awslogs-ecs-joomla","awslogs-stream-prefix":"turnkey-joomla","awslogs-region":"eu-west-1"}},"LinuxParameters":{"InitProcessEnabled":true},"Essential":true},{"Name":"nginx","Image":"/nginx:1.14.2","Cpu":256,"Memory":256,"PortMappings":[{"ContainerPort":80,"Protocol":"tcp"},{"ContainerPort":443,"Protocol":"tcp"}],"MountPoints":[{"SourceVolume":"webroot","ContainerPath":"/var/www/html","ReadOnly":true},{"SourceVolume":"vhosts","ContainerPath":"/etc/turnkey/vhosts","ReadOnly":true}],"LogConfiguration":{"LogDriver":"awslogs","Options":{"awslogs-create-group":"true","awslogs-group":"awslogs-ecs-nginx","awslogs-stream-prefix":"turnkey-nginx","awslogs-region":"eu-west-1"}},"LinuxParameters":{"InitProcessEnabled":true},"Essential":true},{"Name":"mariadb","Image":"/mariadb:10.3","Cpu":256,"Memory":512,"Environment":[{"Value":"matomo","Name":"DB_USER"},{"Value":"matomo","Name":"DB_NAME"},{"Value":"Kappa123","Name":"DB_PASS"}],"MountPoints":[{"SourceVolume":"initdb","ContainerPath":"/etc/turnkey/initdb","ReadOnly":true},{"SourceVolume":"secrets","ContainerPath":"/etc/turnkey/secrets","ReadOnly":true}],"LogConfiguration":{"LogDriver":"awslogs","Options":{"awslogs-create-group":"true","awslogs-group":"awslogs-ecs-mariadb","awslogs-stream-prefix":"turnkey-mariadb","awslogs-region":"eu-west-1"}},"LinuxParameters":{"InitProcessEnabled":true},"Essential":true}],"Cpu":"1024","Memory":"2048","Volumes":[{"Name":"webroot"},{"Name":"vhosts"},{"Name":"initdb"},{"Name":"secrets"}],"RequiresCompatibilities":["FARGATE","EC2"],"NetworkMode":"awsvpc"}},"Protocols":{"Lowercase":{"HTTP":"http","HTTPS":"https","TCP":"tcp"}}},"Conditions":{"HaveHTTP":{"Fn::Not":[{"Fn::Equals":[{"Fn::FindInMap":["TDMetadata",{"Ref":"TaskDefinitionName"},"HTTP"]},"NONE"]}]},"WantHTTP":{"Fn::Equals":[{"Ref":"LoadBalancerProtocol"},"HTTP"]},"NeedHTTP":{"Fn::And":[{"Condition":"HaveHTTP"},{"Condition":"WantHTTP"}]},"HaveHTTPS":{"Fn::Not":[{"Fn::Equals":[{"Fn::FindInMap":["TDMetadata",{"Ref":"TaskDefinitionName"},"HTTPS"]},"NONE"]}]},"WantHTTPS":{"Fn::Equals":[{"Ref":"LoadBalancerProtocol"},"HTTPS"]},"NeedHTTPS":{"Fn::And":[{"Condition":"HaveHTTPS"},{"Condition":"WantHTTPS"}]},"HaveTCP":{"Fn::Not":[{"Fn::Equals":[{"Fn::FindInMap":["TDMetadata",{"Ref":"TaskDefinitionName"},"TCP"]},"NONE"]}]},"WantTCP":{"Fn::Equals":[{"Ref":"LoadBalancerProtocol"},"TCP"]},"NeedTCP":{"Fn::And":[{"Condition":"HaveTCP"},{"Condition":"WantTCP"}]},"NeedALB":{"Fn::Or":[{"Condition":"NeedHTTP"},{"Condition":"NeedHTTPS"}]},"NeedNLB":{"Condition":"NeedTCP"},"NeedELB":{"Fn::Or":[{"Condition":"NeedALB"},{"Condition":"NeedNLB"}]},"NeedEC2":{"Fn::Equals":[{"Ref":"WantEC2"},"yes"]},"NeedDemoService":{"Fn::Equals":[{"Ref":"WantDemoService"},"yes"]},"NeedS3AccessLogs":{"Fn::Equals":[{"Ref":"WantS3AccessLogs"},"yes"]},"NeedSSLCert":{"Fn::And":[{"Condition":"NeedHTTPS"},{"Fn::Equals":[{"Ref":"SSLCertificateARN"},"NONE"]}]},"FARGATE":{"Fn::Equals":[{"Ref":"Placement"},"FARGATE"]},"EC2":{"Fn::Equals":[{"Ref":"Placement"},"EC2"]}},"Resources":{"PrivateSubnet1":{"Type":"AWS::EC2::Subnet","Properties":{"VpcId":{"Ref":"VPC"},"Tags":[{"Key":"visibility","Value":"private"}],"AvailabilityZone":{"Fn::Select":[0,{"Fn::GetAZs":{"Ref":"AWS::Region"}}]},"CidrBlock":{"Fn::Select":[0,{"Fn::Cidr":[{"Ref":"VPCCidr"},1,{"Ref":"SubnetMaskBits"}]}]}}},"PrivateSubnet1RouteTableAssociation":{"Type":"AWS::EC2::SubnetRouteTableAssociation","Properties":{"RouteTableId":{"Ref":"PrivateSubnet1RouteTable"},"SubnetId":{"Ref":"PrivateSubnet1"}}},"PrivateSubnet1RouteTable":{"Type":"AWS::EC2::RouteTable","Properties":{"VpcId":{"Ref":"VPC"}}},"PrivateSubnet1Route":{"Type":"AWS::EC2::Route","Properties":{"RouteTableId":{"Ref":"PrivateSubnet1RouteTable"},"DestinationCidrBlock":"0.0.0.0/0","NatGatewayId":{"Ref":"PublicSubnet2NatGateway"}}},"PublicSubnet2":{"Type":"AWS::EC2::Subnet","Properties":{"VpcId":{"Ref":"VPC"},"Tags":[{"Key":"visibility","Value":"public"}],"AvailabilityZone":{"Fn::Select":[0,{"Fn::GetAZs":{"Ref":"AWS::Region"}}]},"CidrBlock":{"Fn::Select":[1,{"Fn::Cidr":[{"Ref":"VPCCidr"},2,{"Ref":"SubnetMaskBits"}]}]}}},"PublicSubnet2RouteTableAssociation":{"Type":"AWS::EC2::SubnetRouteTableAssociation","Properties":{"RouteTableId":{"Ref":"PublicRouteTable"},"SubnetId":{"Ref":"PublicSubnet2"}}},"PublicSubnet2NatGatewayEIP":{"Type":"AWS::EC2::EIP","Properties":{"Domain":"vpc"}},"PublicSubnet2NatGateway":{"Type":"AWS::EC2::NatGateway","Properties":{"AllocationId":{"Fn::GetAtt":["PublicSubnet2NatGatewayEIP","AllocationId"]},"SubnetId":{"Ref":"PublicSubnet2"}}},"PublicSubnet3":{"Type":"AWS::EC2::Subnet","Properties":{"VpcId":{"Ref":"VPC"},"Tags":[{"Key":"visibility","Value":"public"}],"AvailabilityZone":{"Fn::Select":[1,{"Fn::GetAZs":{"Ref":"AWS::Region"}}]},"CidrBlock":{"Fn::Select":[2,{"Fn::Cidr":[{"Ref":"VPCCidr"},3,{"Ref":"SubnetMaskBits"}]}]}}},"PublicSubnet3RouteTableAssociation":{"Type":"AWS::EC2::SubnetRouteTableAssociation","Properties":{"RouteTableId":{"Ref":"PublicRouteTable"},"SubnetId":{"Ref":"PublicSubnet3"}}},"PublicSubnet3NatGatewayEIP":{"Type":"AWS::EC2::EIP","Properties":{"Domain":"vpc"}},"PublicSubnet3NatGateway":{"Type":"AWS::EC2::NatGateway","Properties":{"AllocationId":{"Fn::GetAtt":["PublicSubnet3NatGatewayEIP","AllocationId"]},"SubnetId":{"Ref":"PublicSubnet3"}}},"EC2Role":{"Type":"AWS::IAM::Role","Condition":"NeedEC2","Properties":{"AssumeRolePolicyDocument":{"Statement":[{"Effect":"Allow","Principal":{"Service":["ec2.amazonaws.com"]},"Action":["sts:AssumeRole"]}]},"Path":"/","Policies":[{"PolicyName":"ecs-service","PolicyDocument":{"Statement":[{"Effect":"Allow","Action":["ecs:CreateCluster","ecs:DeregisterContainerInstance","ecs:DiscoverPollEndpoint","ecs:Poll","ecs:RegisterContainerInstance","ecs:StartTelemetrySession","ecs:Submit*","logs:CreateLogStream","logs:PutLogEvents","ecr:GetAuthorizationToken","ecr:BatchGetImage","ecr:GetDownloadUrlForLayer"],"Resource":"*"}]}}]}},"TaskRole":{"Type":"AWS::IAM::Role","Properties":{"AssumeRolePolicyDocument":{"Statement":[{"Effect":"Allow","Principal":{"Service":["ecs-tasks.amazonaws.com"]},"Action":["sts:AssumeRole"]}]},"Path":"/","Policies":[{"PolicyName":"metering+logging","PolicyDocument":{"Statement":[{"Effect":"Allow","Action":["aws-marketplace:RegisterUsage","logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents"],"Resource":"*"}]}}]}},"TaskExecutionRole":{"Type":"AWS::IAM::Role","Properties":{"AssumeRolePolicyDocument":{"Statement":[{"Effect":"Allow","Principal":{"Service":["ecs-tasks.amazonaws.com"]},"Action":["sts:AssumeRole"]}]},"Path":"/","Policies":[{"PolicyName":"logging","PolicyDocument":{"Statement":[{"Effect":"Allow","Action":["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents","ecr:GetAuthorizationToken","ecr:BatchCheckLayerAvailability","ecr:GetDownloadUrlForLayer","ecr:BatchGetImage"],"Resource":"*"}]}}]}},"AutoscalingRole":{"Type":"AWS::IAM::Role","Condition":"NeedEC2","Properties":{"AssumeRolePolicyDocument":{"Statement":[{"Effect":"Allow","Principal":{"Service":["application-autoscaling.amazonaws.com"]},"Action":["sts:AssumeRole"]}]},"Path":"/","Policies":[{"PolicyName":"service-autoscaling","PolicyDocument":{"Statement":[{"Effect":"Allow","Action":["application-autoscaling:*","cloudwatch:DescribeAlarms","cloudwatch:PutMetricAlarm","ecs:DescribeServices","ecs:UpdateService"],"Resource":"*"}]}}]}},"ECSRole":{"Type":"AWS::IAM::Role","Condition":"NeedEC2","Properties":{"AssumeRolePolicyDocument":{"Statement":[{"Effect":"Allow","Principal":{"Service":["ecs.amazonaws.com"]},"Action":["sts:AssumeRole"]}]},"Path":"/","Policies":[{"PolicyName":"ecs-service","PolicyDocument":{"Statement":[{"Effect":"Allow","Action":["ec2:AttachNetworkInterface","ec2:CreateNetworkInterface","ec2:CreateNetworkInterfacePermission","ec2:DeleteNetworkInterface","ec2:DeleteNetworkInterfacePermission","ec2:Describe*","ec2:DetachNetworkInterface","elasticloadbalancing:DeregisterInstancesFromLoadBalancer","elasticloadbalancing:DeregisterTargets","elasticloadbalancing:Describe*","elasticloadbalancing:RegisterInstancesWithLoadBalancer","elasticloadbalancing:RegisterTargets"],"Resource":"*"}]}}]}},"SSLCertificate":{"Type":"AWS::CertificateManager::Certificate","Condition":"NeedSSLCert","Properties":{"DomainName":{"Ref":"SSLDomainName"},"SubjectAlternativeNames":{"Ref":"SSLCertificateSANs"},"ValidationMethod":{"Ref":"SSLValidationMethod"}}},"VPC":{"Type":"AWS::EC2::VPC","Properties":{"EnableDnsSupport":true,"EnableDnsHostnames":true,"CidrBlock":{"Ref":"VPCCidr"}}},"InternetGateway":{"Type":"AWS::EC2::InternetGateway"},"InternetGatewayAttachment":{"Type":"AWS::EC2::VPCGatewayAttachment","Properties":{"VpcId":{"Ref":"VPC"},"InternetGatewayId":{"Ref":"InternetGateway"}}},"PublicRouteTable":{"Type":"AWS::EC2::RouteTable","Properties":{"VpcId":{"Ref":"VPC"}}},"PublicRoute":{"Type":"AWS::EC2::Route","Properties":{"RouteTableId":{"Ref":"PublicRouteTable"},"DestinationCidrBlock":"0.0.0.0/0","GatewayId":{"Ref":"InternetGateway"}}},"EcsHostSecurityGroup":{"Type":"AWS::EC2::SecurityGroup","Condition":"NeedEC2","Properties":{"VpcId":{"Ref":"VPC"},"GroupDescription":"Access to the ECS hosts that run containers","SecurityGroupIngress":[{"CidrIp":{"Ref":"IngressCIDR"},"Description":"Ingress SSH from specified addresses","FromPort":22,"IpProtocol":"tcp","ToPort":22},{"CidrIp":"0.0.0.0/0","Description":"Ingress TCP from specified addresses","FromPort":{"Fn::Select":[1,{"Fn::Split":[":",{"Fn::FindInMap":["TDMetadata",{"Ref":"TaskDefinitionName"},{"Ref":"LoadBalancerProtocol"}]}]}]},"IpProtocol":"tcp","ToPort":{"Fn::Select":[1,{"Fn::Split":[":",{"Fn::FindInMap":["TDMetadata",{"Ref":"TaskDefinitionName"},{"Ref":"LoadBalancerProtocol"}]}]}]}},{"Description":"Ingress from ELB","IpProtocol":-1,"SourceSecurityGroupId":{"Ref":"ELBSG"}}]}},"EcsSecurityGroupIngressFromSelf":{"Type":"AWS::EC2::SecurityGroupIngress","Condition":"NeedEC2","Properties":{"Description":"Ingress from other containers in the same security group","GroupId":{"Ref":"EcsHostSecurityGroup"},"IpProtocol":-1,"SourceSecurityGroupId":{"Ref":"EcsHostSecurityGroup"}}},"ELBSG":{"Type":"AWS::EC2::SecurityGroup","Condition":"NeedELB","Properties":{"GroupDescription":"Unlimited access to the public facing load balancer","VpcId":{"Ref":"VPC"},"SecurityGroupIngress":[{"CidrIp":"0.0.0.0/0","IpProtocol":-1}]}},"ECSAutoScalingGroup":{"Type":"AWS::AutoScaling::AutoScalingGroup","Condition":"NeedEC2","Properties":{"VPCZoneIdentifier":[{"Ref":"PrivateSubnet1"}],"LaunchConfigurationName":{"Ref":"ContainerInstances"},"MinSize":"1","MaxSize":{"Ref":"MaxSize"},"DesiredCapacity":{"Ref":"DesiredCapacity"}},"CreationPolicy":{"ResourceSignal":{"Timeout":"PT15M"}},"UpdatePolicy":{"AutoScalingReplacingUpdate":{"WillReplace":"true"}}},"ContainerInstances":{"Type":"AWS::AutoScaling::LaunchConfiguration","Condition":"NeedEC2","Properties":{"ImageId":{"Ref":"ECSAMI"},"SecurityGroups":[{"Ref":"EcsHostSecurityGroup"}],"InstanceType":{"Ref":"InstanceType"},"IamInstanceProfile":{"Ref":"EC2InstanceProfile"},"KeyName":{"Ref":"KeyName"},"UserData":{"Fn::Base64":{"Fn::Join":["\n",["#!/bin/bash -xe",{"Fn::Sub":"echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config"},"echo ECS_LOGLEVEL=debug >> /etc/ecs/ecs.config","echo ECS_AVAILABLE_LOGGING_DRIVERS='[\"awslogs\",\"json-file\",\"none\"]' >> /etc/ecs/ecs.config","echo ECS_ENABLE_TASK_ENI=true >> /etc/ecs/ecs.config","yum install -y aws-cfn-bootstrap",{"Fn::Sub":"/opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}"}]]}}}},"EC2InstanceProfile":{"Type":"AWS::IAM::InstanceProfile","Condition":"NeedEC2","Properties":{"Path":"/","Roles":[{"Ref":"EC2Role"}]}},"S3AccessLogsBucket":{"Type":"AWS::S3::Bucket","Condition":"NeedS3AccessLogs","Properties":{"AccessControl":"LogDeliveryWrite"}},"ELB":{"Type":"AWS::ElasticLoadBalancingV2::LoadBalancer","Condition":"NeedELB","Properties":{"Type":{"Fn::If":["NeedALB","application","network"]},"Scheme":"internet-facing","LoadBalancerAttributes":{"Fn::If":["NeedS3AccessLogs",[{"Key":"access_logs.s3.enabled","Value":"true"},{"Key":"access_logs.s3.bucket","Value":{"Ref":"S3AccessLogsBucket"}}],{"Ref":"AWS::NoValue"}]},"Subnets":[{"Ref":"PublicSubnet2"},{"Ref":"PublicSubnet3"}],"SecurityGroups":[{"Ref":"ELBSG"}]}},"TargetGroup":{"Type":"AWS::ElasticLoadBalancingV2::TargetGroup","Condition":"NeedELB","Properties":{"Port":{"Fn::Select":[1,{"Fn::Split":[":",{"Fn::FindInMap":["TDMetadata",{"Ref":"TaskDefinitionName"},{"Ref":"LoadBalancerProtocol"}]}]}]},"Protocol":{"Ref":"LoadBalancerProtocol"},"HealthCheckProtocol":{"Ref":"LoadBalancerProtocol"},"HealthCheckIntervalSeconds":6,"HealthyThresholdCount":2,"UnhealthyThresholdCount":2,"TargetType":"ip","VpcId":{"Ref":"VPC"}}},"ELBListener":{"Type":"AWS::ElasticLoadBalancingV2::Listener","Condition":"NeedELB","Properties":{"Port":{"Fn::Select":[1,{"Fn::Split":[":",{"Fn::FindInMap":["TDMetadata",{"Ref":"TaskDefinitionName"},{"Ref":"LoadBalancerProtocol"}]}]}]},"Protocol":{"Ref":"LoadBalancerProtocol"},"DefaultActions":[{"TargetGroupArn":{"Ref":"TargetGroup"},"Type":"forward"}],"LoadBalancerArn":{"Ref":"ELB"}}},"ECSCluster":{"Type":"AWS::ECS::Cluster"},"TaskDefinition":{"Type":"AWS::ECS::TaskDefinition","Condition":"NeedDemoService","Properties":{"Volumes":{"Fn::FindInMap":["TDMetadata",{"Ref":"TaskDefinitionName"},"Volumes"]},"Cpu":{"Fn::FindInMap":["TDMetadata",{"Ref":"TaskDefinitionName"},"Cpu"]},"Family":{"Fn::FindInMap":["TDMetadata",{"Ref":"TaskDefinitionName"},"Family"]},"Memory":{"Fn::FindInMap":["TDMetadata",{"Ref":"TaskDefinitionName"},"Memory"]},"NetworkMode":{"Fn::FindInMap":["TDMetadata",{"Ref":"TaskDefinitionName"},"NetworkMode"]},"RequiresCompatibilities":{"Fn::FindInMap":["TDMetadata",{"Ref":"TaskDefinitionName"},"RequiresCompatibilities"]},"ContainerDefinitions":{"Fn::FindInMap":["TDMetadata",{"Ref":"TaskDefinitionName"},"ContainerDefinitions"]},"ExecutionRoleArn":{"Ref":"TaskExecutionRole"},"TaskRoleArn":{"Ref":"TaskRole"}}},"Service":{"Type":"AWS::ECS::Service","Condition":"NeedDemoService","DependsOn":["ELBListener"],"Properties":{"Cluster":{"Ref":"ECSCluster"},"TaskDefinition":{"Ref":"TaskDefinition"},"HealthCheckGracePeriodSeconds":120,"DesiredCount":"1","NetworkConfiguration":{"AwsvpcConfiguration":{"Fn::If":["EC2",{"AssignPublicIp":"DISABLED","SecurityGroups":[{"Ref":"ELBSG"}],"Subnets":[{"Ref":"PrivateSubnet1"}]},{"AssignPublicIp":"ENABLED","SecurityGroups":[{"Ref":"ELBSG"}],"Subnets":[{"Ref":"PublicSubnet2"},{"Ref":"PublicSubnet3"}]}]}},"LoadBalancers":[{"Fn::If":["NeedELB",{"ContainerName":{"Fn::Select":[0,{"Fn::Split":[":",{"Fn::FindInMap":["TDMetadata",{"Ref":"TaskDefinitionName"},{"Ref":"LoadBalancerProtocol"}]}]}]},"ContainerPort":{"Fn::Select":[1,{"Fn::Split":[":",{"Fn::FindInMap":["TDMetadata",{"Ref":"TaskDefinitionName"},{"Ref":"LoadBalancerProtocol"}]}]}]},"TargetGroupArn":{"Ref":"TargetGroup"}},{"Ref":"AWS::NoValue"}]}]}}},"Outputs":{"ExternalELBUrl":{"Condition":"NeedELB","Description":"The URL of the external-facing elastic load balancer","Value":{"Fn::Join":["",[{"Fn::FindInMap":["Protocols","Lowercase",{"Ref":"LoadBalancerProtocol"}]},"://",{"Fn::GetAtt":["ELB","DNSName"]}]]},"Export":{"Name":{"Fn::Join":[":",[{"Ref":"AWS::StackName"},"ExternalELBUrl"]]}}},"S3AccessLogsBucketName":{"Condition":"NeedS3AccessLogs","Description":"The S3 bucket where access logs of the load balancer are stored","Value":{"Ref":"S3AccessLogsBucket"},"Export":{"Name":{"Fn::Join":[":",[{"Ref":"AWS::StackName"},"S3AccessLogsBucketName"]]}}},"TaskExecutionRole":{"Description":"The ARN of the task execution role for Fargate usage","Value":{"Fn::GetAtt":["TaskExecutionRole","Arn"]},"Export":{"Name":{"Fn::Join":[":",[{"Ref":"AWS::StackName"},"TaskExecutionRole"]]}}}}}
